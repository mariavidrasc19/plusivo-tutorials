[{"id":"f3331179-9758-49d8-8132-d2cbbcc34e37","type":"markdown","editable":false,"data":"# Lesson 6: RGB LED and Ultrasonic\n\n## Overview\nThis lesson combines two lessons, lesson 3, RGB LED, and lesson 5,\nUltrasonic HC-SR04+, and you will learn how to flash an LED depending on distance.\n\n\n## Components required\n\n* Development board;\n* Breadboard 830p; \n* 1 x RGB LED;\n* 3 x 150Ω resistor;\n* 10 x male-to-male jumper wires;\n* Micro USB – Type A USB cable;\n\n\n## Components introduction\n### Ultrasonic HC SR04+\nThe ultrasonic module consists of an ultrasonic transmitter and an ultrasonic\nreceiver.\n\n  ``` photo ```(photo)\n\nThe transmitter is used to generate an ultrasonic sound at about 40 kHz.\nWhen there is an object in front of the transmitter, the ultrasound is bounced back to\nthe receiver. Knowing the speed of sound, we can calculate the distance to that object\nwith an accuracy of up to 3mm.\n\nBelow, you can learn how to calculate the distance using the speed of sound.\n1) Transmitter emits an ultrasonic sound for about 10 microseconds. 1\nmicrosecond (1μs) is equally to 10s) is equally to 10 -6 seconds (0.000001 seconds).\n\n2) If there is an object, the ultrasonic sound is bounced back to the sensor,\nwhere the receiver is listening.\n\n3) Now, we have to record the time it takes the sound to travel from the\ntransmitter to object and back to the receiver.\n\n4) Using the speed of sound (0.034 cm/μs) is equally to 10s), you can calculate the distance using\nthe following formula:\nd=t⋅v/2\nwhere:\n\n* d represents the distance in centimeters;\n\n* t represents the time passed for the sound to return to the receiver;\n\n* v represents the speed of sound (0.034 cm/μs) is equally to 10s);\n\nThis ultrasonic module can work with voltages between 3V and 5.5V and has\na small operating current (3 mA).\n\n\n## Connections\n  Below, you can find the schematic:\n      \n  ``` photo ```(photo)\n  \nIn the next diagram we have as main elements an ultrasound sensor and an RGB LED.\n\nTo connect the led we need 3 resistors to avoid a possible burning of it. And we will connect its longer pin to the ground.\nThe ultrasonic sensor has 4 pins, 2 are the voltage and the ground. And the other 2 are Trigger and Echo. They help measure and transmit data to ESP8266.\n  \n  Next, you can find a visual representation of the project:\n  \n  ``` photo ```(photo)\n## Code","code":"","error":"","result":""},{"id":"5902672c-29fb-4239-bbd8-3108559faaff","type":"markdown","editable":false,"data":"### Import libraries\nFirst, we import libraries to later use the functions and variables predefined in them.","code":"","error":"","result":""},{"id":"87e97f97-73cb-4134-a265-640f66533492","type":"python","editable":false,"data":"#use these libraries to declare used pins\nfrom machine import Pin, PWM\nimport machine\n#for delay\nfrom time import sleep\nimport time\n#utime is an library used for getting the current time and date\n#measuring time intervals, and for delays\nimport utime\n","code":"","error":"","result":""},{"id":"13f72ea9-245e-4109-91d8-ce7867093468","type":"markdown","editable":false,"data":"### Declaring variables\nWe declare the variables used with the corresponding pins. We declare the three colors of the led as an output pins ('Pin.OUT') and we will look at the pin diagram and notice \nthat pin D5 is GPIO**12**, D7 is GPIO**13** and D8 is GPIO**15**.\n","code":"","error":"","result":""},{"id":"fcf5da4b-b8c9-4203-a870-778ad5e41591","type":"python","editable":false,"data":"#set the mode of the pins used by the RGB LED as OUTPUT\nred = Pin(12, Pin.OUT)\ngreen = Pin(13, Pin.OUT)\nblue = Pin(15, Pin.OUT)","code":"","error":"","result":""},{"id":"f803ebf7-9170-4172-a6c8-e37fdf03a486","type":"markdown","editable":false,"data":"We declare as output the transmitter to be able to send ultrasonic waves.","code":"","error":"","result":""},{"id":"2e854bd6-975f-473d-897d-d3871577566e","type":"python","editable":false,"data":"#set the input to trigger module to send ultrasonic waves\n#the trigger pin (transmitter) must be set as OUTPUT\ntrig_pin = Pin(0, Pin.OUT) #D3","code":"","error":"","result":""},{"id":"9d266f37-663d-47b1-86a5-f5956273ec36","type":"markdown","editable":false,"data":"We declare that the input receiver can receive the waves reflected by the transmitter.","code":"","error":"","result":""},{"id":"56533e5f-f149-4550-9828-55956fbb50f3","type":"python","editable":false,"data":"#set he output received representing the reflection of waves\n#the echo pin (receiver) must be set as INPUT\necho_pin = Pin(14,  Pin.IN) #D5","code":"","error":"","result":""},{"id":"186c1328-c6d0-47c7-9458-a8242f9c662e","type":"markdown","editable":false,"data":"### Infinite loop\n\nWe will create an infinite loop for the board to execute the instructions continuously.\n\nIn the this loop we will calculate the distance, as in the previous lesson, and then, using an if statement, we will decide if the distance is lower than 25\ncentimeters, the red LED will flash at a interval of 35 ms. If the distance is greater than 25 cm, the green LED will slowly flash.","code":"","error":"","result":""},{"id":"47ca5852-3325-4786-b0b0-879f987275ff","type":"python","editable":false,"data":"#for board execute the instructions continuously we make an infinite loop\nwhile True:\n    #set the trigPin to LOW(0) in order to prepare for the next reading\n    trig_pin.value(0)\n    #delay for 2 microseconds\n    utime.sleep_us(2)\n    \n    #generate an ultrasound for 10 microseconds then turn off the transmitter\n    trig_pin.value(1)\n    utime.sleep_us(10)\n    trig_pin.value(0)\n\n    #find the time using machine.time_pulse_us(pin, pulse_level, timeout_us=1000000)\n    #Time a pulse on the given pin, and return the duration of the pulse in microsecond\n    # 29000 timeout optional => nr milisecunds witch the pulse have to wait for begin\n\n    time = machine.time_pulse_us(echo_pin, 1)\n    \n    #the formula for distance d = t*v/2\n    #v represents the speed of sound in air (about 0.034 cm/μs)\n    #t is the time, the duration of the pulse\n    distance=(time*0.034)/2\n    \n    #display the distance\n    print(\"The distance is {} cm\".format(distance))\n    \n    if distance < 25.0:\n        #the next 4 instructions are used\n        #to create the flashing effect\n        #turn on the LED and wait 35 ms\n        red.on()\n        sleep(0.035)\n        \n        red.off()\n        sleep(0.035)\n    else:\n        #turn on the green LED and wait 300 ms\n        green.on()\n        sleep(0.3)\n        \n        #turn off the green LED and wait 200 ms\n        green.off()\n        sleep(0.2)","code":"","error":"","result":""}]