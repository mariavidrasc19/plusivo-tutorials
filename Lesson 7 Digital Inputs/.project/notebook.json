[{"id":"ea852f83-de52-4994-8641-0d0595708763","type":"markdown","editable":false,"data":"# Lesson 7: Digital Inputs\n## 7.1 Overview\n\nIn this lesson, you are going to learn how to use a push button as a digital\ninput to turn an LED on and off.\n\n## 7.2 Components required\n* Development board\n* Breadboard 830p\n* 2 x push buttons\n* 1 x LED\n* 1 x 150 Ω resistor\n* 7 x male-to-male jumper wires\n* Micro USB – Type A USB cable\n","code":"","error":"","result":""},{"id":"aa64a0d9-b880-41fe-b862-1e4e2459de2c","type":"markdown","editable":false,"data":"## 7.3 Components introduction\n### Momentary push button switch\n\nThis type of button is very common in prototyping as it is breadboard\nfriendly, cheap and reliable. The way it works is pretty basic: there are 2 lines: A-C\nand B-D, which are always connected. When the button is pressed, these two lines AC\nand B-D, are connected together, which means that the current will flow from A to\nD and from B to C.\n\n#TODO img pg 65\n\n## 7.4 Connections\nBelow you can find the schematic:\n\nNext, you can find a visual representation of the project:\n\n#TODO imgs pg 66","code":"","error":"","result":""},{"id":"5dbd3d4f-a007-4e9a-88c0-b061a6de7441","type":"markdown","editable":false,"data":"## 7.5 Code\nThe code is very simple. First, we have to declare the pins used by the buttons\nand the LED. We will connect the “On” button to D1(GPIO 4) and the “Off” button to D2(GPIO 5). \nThe LED will be connected to D7(GPIO 13).","code":"","error":"","result":""},{"id":"89c94f2b-e540-4dfa-bbe5-689c557db57e","type":"python","editable":false,"data":"#Digital input LED\r\n\r\nfrom machine import Pin\r\nimport time","code":"","error":"","result":""},{"id":"df24da6a-06ca-4fa3-8451-d0b0d1177a6c","type":"python","editable":false,"data":"#set the pin for LED\r\nled = Pin(13, Pin.OUT)","code":"","error":"","result":""},{"id":"e8d561db-efd2-4cf7-91d2-eb0adc0dc0f5","type":"markdown","editable":false,"data":"Next step is to set the pins for the\r\nbuttons as INPUT_PULLUP and the pin for the LED as OUTPUT.","code":"","error":"","result":""},{"id":"872e1e02-0210-4047-acb8-91daa54a2495","type":"python","editable":false,"data":"#create the digital input pin with an internal pull-up resistor\r\n#Pin.IN means the pin will be set as an input that can read high or low levels\r\n#Pin.PULL_UP to enable an internal pull-up resistor on the pin\r\nbutton_on = Pin(5, Pin.IN, Pin.PULL_UP)\r\nbutton_off = Pin(4, Pin.IN, Pin.PULL_UP)","code":"","error":"","result":""},{"id":"81beb8ed-f26f-4694-aa23-7051f4e73cbc","type":"markdown","editable":true,"data":"In loop we will wait for the buttons to be pressed, and if the On\r\nbutton was pushed, then the LED will turn On, and if the Off button was pushed,\r\nthen the LED will be turned Off. In order to check the state of a button (if it is pressed\r\nor not), you have to use the instruction value(). If the value returned by\r\nthis instruction is 0, it means that the button is pressed. Contrary, if the\r\nvalue is 1, it means that the button is not pressed.","code":"","error":"","result":""},{"id":"d1d59fca-013b-4d6f-9fea-4971f21f3bfb","type":"python","editable":false,"data":"while True:\r\n    # 0 => pressed\r\n    # 1 => release\r\n    \r\n    #check if the button off is pressed\r\n    if button_on.value() and not button_off.value():\r\n        #turn off the LED\r\n        led.off()\r\n        \r\n    #check if the button on is pressed\r\n    elif button_off.value() and not button_on.value():\r\n        #turn on the LED\r\n        led.on()\r\n        \r\n    #wait for 0.1s (100 ms)\r\n    time.sleep(0.01)\r\n        ","code":"","error":"","result":""}]