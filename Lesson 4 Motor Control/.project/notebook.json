[{"id":"815de612-0466-491d-a451-1973bcd2b502","type":"markdown","editable":false,"data":"# Lesson 4: Motor Control\n## Overview\n  In this lesson you will learn how to control a motor.\n\n## Components required\n\n* Development board;\n* Micro USB â€“ Type A USB cable;\n* L293D H-Bridge Motor Driver;\n* Breadboard 830p;\n* Breadboard power supply;\n* 9 x male-to-male jumper wires;\n* 1 x DC motor; \n* 1 x 9V battery\n\n## Components introduction\n### L293D H-Bridge\nBecause the board isn't powerful enough alone to power a motor we are going to use a DC motor driver in between the development board and the motors. For this tutorial we use the L293D H-Bridge Motor Driver.\n\nAn H-bridge is an electronic circuit that enables a voltage to be applied across a load in opposite direction. These bridges are often used in robotics as they allow DC motors to run forwards or backwards.\n\n  ``` photo ```(photo)\n\nThe pins we will control are EN1, EN2, IN1, IN2, IN3, IN4. EN1 and EN2 are enable pins (we use them basically to start the motor). The IN1, IN2 and respectively the IN3, IN4 control the direction of the rotation.\n\n### Breadboard power supply\nThis power supply is pretty useful in prototyping because it is breadboard friendly and has variable outputs, 3.3 V or 5 V.\n\nThe only way to power this power supply is through DC jack. Supply voltage must be between 6.5 V and 12 V. DO NOT try to power the module via USB port, it is only for output.\n\n  ``` photo ```(photo)\n\nIn order to select the output voltage, you have to move a jumper between different pins. \nFor example, in the above image, the jumper in the red rectangle is set to 5 V and the jumper in the green rectangle is set to OFF (this means that there is no output voltage). \nMoreover, there is a button, located next the input jack, that turns the module on/off.\n\n## Connections\nBelow, you can find the schematic:\n\n  ``` photo ```(photo)\n  \nIn the next diagram we have as main elements the H Bridge L293D and the engine.\n\nThe H power will help us to rotate the engine in any direction we want. It requires 2 voltage connections, one ground connection, 3 board connections, and 2 motor connections.\nIt connects to the motor to send voltage to one of the 2 connections.\n\nBelow, you can find a visual representation of the connections:\n  ``` photo ```(photo)\n\nIn addition to everything shown in the diagram it is necessary to connect a 9V battery to the breadboard power suplly with the help of an adapter.\n\n## Code","code":"","error":"","result":""},{"id":"580c95c4-eb3d-41a2-8d9d-8d1b46b6de96","type":"markdown","editable":false,"data":"### Import libraries\nFirst, we import libraries to later use the functions and variables predefined in them.","code":"","error":"","result":""},{"id":"fbc7aa7f-d890-43f8-8ff8-8d3b6b5fec67","type":"python","editable":false,"data":"#use these libraries to declare used pins and PWM\nfrom machine import Pin, PWM\n#use these libraries for delay\nfrom time import sleep","code":"","error":"","result":""},{"id":"4e34350d-d1c8-4432-8806-48f482dfe2fe","type":"markdown","editable":false,"data":"### Declaring variables\nWe declare the variables used with the corresponding pins. We declare the motorspeed_pin as the output pin ('Pin.OUT') and we will look at the pin diagram and notice \nthat pin D5 is GPIO**14**.\n\nWe also declare the pwm for motorspeed_pin to create fluctuating energy.","code":"","error":"","result":""},{"id":"c032c09b-3a99-4dd4-8d65-b2565a6f299e","type":"python","editable":false,"data":"#define the pins used by motror for speed control\nmotorspeed_pin = Pin(14, Pin.OUT)\n#and the pwm for motror speed control\npwm = PWM(motorspeed_pin)","code":"","error":"","result":""},{"id":"ed1b4eab-9f5b-4187-b9b2-2b5b55f55be0","type":"markdown","editable":false,"data":"We determine the direction of the motor through 2 variables connected to pins D6 and D7, which according to the schematic are GPIO**12** and GPIO**13**.","code":"","error":"","result":""},{"id":"4b5826c5-c6c8-4116-b200-147c8d3ef284","type":"python","editable":false,"data":"#we define pins used by motror for its direction and also initialise it as OUTPUT\nDIRA = Pin(12, Pin.OUT) #D6\nDIRB = Pin(13, Pin.OUT) #D7","code":"","error":"","result":""},{"id":"ac881591-2e8d-4368-b1d5-7a30f46f9da3","type":"markdown","editable":false,"data":"We define 2 variables for the waiting time of the engine to make it easier for us to write the code.","code":"","error":"","result":""},{"id":"ef19564a-b4c1-4a10-a2d1-914f8a9fedf9","type":"python","editable":false,"data":"#waiting time\ndelayOn = 2\ndelayOff = 3","code":"","error":"","result":""},{"id":"fee180c6-2ec6-4123-9765-298e42c1ea0e","type":"markdown","editable":false,"data":"\n### Crate a function\nWe will create a new function that will turn off the motor by setting the speed pin and direction pins to LOW (off).","code":"","error":"","result":""},{"id":"862e9360-4978-4d1b-9905-a997221aafa1","type":"python","editable":false,"data":"#we create a function\ndef turnOff ():\n    #this instruction is used to set the speed of the motor to 0 (off)\n    motorspeed_pin.off()\n    #in these instructions the state is irrelevant because the motor is off\n    DIRA.off()\n    DIRB.off()\n    #wait 3 seconds\n    sleep(delayOff)","code":"","error":"","result":""},{"id":"b2bd67cf-5277-476a-bd91-27f076e7b557","type":"markdown","editable":false,"data":"\n### Infinite loop\n\nWe will create an infinite loop for the board to execute the instructions continuously.\n\nIn the this loop we will first turn on the motor at maximum speed, by setting the motorspeed_pin to HIGH, and the DIRA pin to HIGH and DIRB pin\nto LOW for turning the motor in one direction, and the DIRA pin to LOW and DIRB pin to HIGH for turning the motor in the opposite direction. The first time we\nwill turn on the motor at maximum speed in one direction, then turn it off for some time, then turn it on at maximum speed in the opposite direction, then turn it off.\n\nNext, we will turn on the motor in one direction at 50% speed using the duty clycleof PWM with a value of 512, which is approximately 50% speed, and DIRA pin to HIGH and DIRB pin to LOW. We will\nturn off the motor and then repeat the previous instructions, but this time DIRA pin will be set to LOW and DIRB pin to HIGH so that the speed of the motor will be 50% and the motor will rotate in the opposite direction.","code":"","error":"","result":""},{"id":"59914276-811e-4b93-b4ba-4aebfb827162","type":"python","editable":false,"data":"#for board execute the instructions continuously we make an infinite loop\nwhile True:\n    #this instruction is used to set the maximum speed of the motor\n    motorspeed_pin.on()\n    #these instructions are used to turn on the motor in one direction\n    DIRA.on()\n    DIRB.off()\n    #wait 2 seconds\n    sleep(delayOn)\n    \n    #turn off the motor\n    turnOff()\n    \n    #this instruction is used to set the maximum speed of the motor\n    motorspeed_pin.on()\n    #these instructions are used to turn on the motor in the opposite direction\n    DIRA.off()\n    DIRB.on()\n    #wait 2 seconds\n    sleep(delayOn)\n    \n    #turn off the motor\n    turnOff()\n    \n    #this instruction sets the motor speed to about 50%, for this we use the PWM duty cycle\n    #you can put any integer from 0 to 1023\n    pwm.duty(512)\n    #these instructions are used to turn on the motor in one direction\n    DIRA.on()\n    DIRB.off()\n    #wait 2 seconds\n    sleep(delayOn)\n    \n    #turn off the motor\n    turnOff()\n    \n    #this instruction sets the motor speed to about 50%, for this we use the PWM duty cycle\n    #you can put any integer from 0 to 1023\n    pwm.duty(512)\n    #these instructions are used to turn on the motor in the opposite direction\n    DIRB.on()\n    DIRA.off()\n    #wait 2 seconds\n    sleep(delayOn)\n    \n    #turn off the motor\n    turnOff()\n","code":"","error":"","result":""}]