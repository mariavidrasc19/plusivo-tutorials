[{"id":"7fe1774d-9064-462f-bd10-7166f859e04b","type":"markdown","editable":false,"data":"# Lesson 16: Setting up a web server using BottlePy\n","code":"","error":"","result":""},{"id":"31a13fda-c986-4bb9-82b7-9e127a8735e3","type":"markdown","editable":false,"data":"## 1 Overview\n\nIn the course of this guide we have already covered how to run python scripts and running a script at the OS startup. During this Lesson we are going to explain how to set up a server using a python micro web-framework.\n\nBottle is a fast, simple and lightweight micro web-framework for Python. It is distributed as a module in a single file and has no dependencies other than the Python Standard Library. This means that the only thing needed to run the Bottle framework is to have Python installed on your OS.\n\nWe chose a micro web-framework because for the purposes of this tutorial it does the job and it is simpler.\n\nAlso Bottle is a Web Server Gateway Interface (WSGI). This is a specification that describes how a web server communicates with web applications, and how applications can be chained together on one request.","code":"","error":"","result":""},{"id":"08fb6bc6-5a24-4e86-831b-d986d4927141","type":"markdown","editable":false,"data":"## 2 Components required\n- Development board with accessories.\n","code":"","error":"","result":""},{"id":"e21e873f-aae6-4266-ab65-8fac6952494e","type":"markdown","editable":false,"data":"## 3 HTTP\n\n**HTTP (Hypertext Transfer Protocol)** is an application protocol for encoding and transporting data between a client and a web server. It is primarily used on the World Wide Web. An HTTP client (usually a web browser) makes a request and the server issues a response that includes not only the requested content, but also status information about the request.\n\nA basic HTTP request involves the following steps:\n\n- a connection to the HTTP server is opened\n- a request is sent to the server\n- server is processing the request\n- the server sends back a response\n- the connection is closed\n\nThere are three main HTTP types of requests: **GET, POST, HEAD**.\n\n### GET:\n\nThe **GET** method requests a representation of the specified resource, and the requests using GET should only retrieve data.\n\n### HEAD:\n\nThe **HEAD** method asks for a response identical to that of a GET request, but without the response body.\n\n### POST:\n\nThe **POST** method requests that the server accepts the entity enclosed in the request as a new subordinate of the web resource identified by the URI.\n","code":"","error":"","result":""},{"id":"51195656-a61e-4ac6-a84d-3639aeb6c230","type":"markdown","editable":false,"data":"## 4 Installing Bottle\n\nTo install the Bottle package just type this in the terminal and press enter:\n\n### sudo apt-get install python3-bottle\n\nNow you can run scripts that use Bottle. Let's try it.\n","code":"","error":"","result":""},{"id":"95c5c9a5-f33d-489d-a540-ce8da48b5299","type":"markdown","editable":false,"data":"## 5 Running a simple BottlePy app\n\nYou know how to import libraries in your script. To run a simple application we need to import some of the functionalities of the Bottle framework. Let's use this \"Hello World\" as an example (code below).\n\nTo access the webapp just open a browser and go to http://127.0.0.1:5000/helloWorld on the device, or to http://your.I.P.here:5000/helloWorld from another device on the same network.\n\nYou can use any port you want, as long it is not used by other services. Try and have fun and change the app as you see fit.\n\nHere are some ports reserved by other services:\n\n| | |\n| - | - |\n| 1 – TCP Port Service Multiplexer (TCPMUX) | 118 – SQL Services |\n| 5 – Remote Job Entry (RJE) | 119 – Newsgroup (NNTP) |\n| 7 - ECHO | 137 – NetBIOS Name Service | \n| 18 – Message Send Protocol (MSP) | 139 – NetBIOS Datagram Service |\n| 20 – FTP - Data | 143 – Interim Mail Access Protocol (IMAP) |\n| 21 – FTP - Control | 150 – NetBIOS Session Service |\n| 22 – SSH Remote Login Protocol | 156 – SQL Server |\n| 23 - Telnet | 161 - SNMP |\n| 25 – Simple Mail Transfer Protocol (SMTP) | 179 – Border Gateway Protocol (BGP) |\n| 29 – MSG ICP | 190 – Gateway Access Control Protocol (GACP) |\n| 37 - Time | 194 – Internet Relay Chat (IRC) |\n| 42 – Host Name Server (Nameserv) | 197 – Directory Location Service (DLS) |\n| 43 - Whols | 389 – Lightweight Directory Access Protocol (LDAP) |\n| 49 – Login Host Protocol | 396 – Novell Netware over IP |\n| 53 – Domain Name System (DNS) | 443 - HTTPS | \n| 69 – Trivial File Transfer Protocol (TFTP) | 444 – Simple Network Paging Protocol (SNPP) |\n| 70 – Gopher Services | 445 – Microsoft-DS |\n| 79 - Finger | 458 – Apple QuickTime |\n| 80 - HTTP | 546 – DHCP Client |\n| 103 – X.400 Standard | 547 – DHCP Server |\n| 108 – SNA Gateway Access Server | 563 - SNEWS |\n| 109 - POP2 | 569 - MSN |\n| 110 - POP3 | 1080 - Socks |\n| 115 – Simple File Transfer Protocol (SFTP) | |\n","code":"","error":"","result":""},{"id":"d05bf21c-1fa6-49a9-a26e-bba285f91e37","type":"markdown","editable":true,"data":"## 6 Rendering templates\n\nBottle by default searches for templates in the folder in which the script is located, subfolder \"views\".\n\nTo render a template we need to import the template module in the bottle framework. The code is as before only this time we store the HTML code in a separate file in the “views” subfolder.\n\n","code":"","error":"","result":""}]