[{"id":"3764d4da-8d27-417d-b98b-8de2a942e1f7","type":"markdown","editable":true,"data":"# Lesson 10: Buzzer and Digital Inputs\n\n## Overview\nIn this lesson, you will learn how to connect and use a buzzer along with a\npush button as a digital input.\n\n## Components required\n\n* Development board;\n* Breadboard 830p; \n* 1 x push button;\n* 1 x passive buzzer;\n* Diode;\n* Transistor;\n* 1 x 1000 Ω resistor;\n* 10 x male-to-male jumper wires;\n* Micro USB – Type A USB cable;\n\n## Components introduction\n### Buzzer\nA buzzer is an audio signaling device that makes a buzzing sound at different frequencies. There are two types of buzzers, active and passive. In our project, we use a passive one. A passive buzzer can make different tones, but it requires a PWM\nsignal from the device which controls the buzzer, in order to produce a noise.\n\n(photo)\n\nMake sure that you respect the polarity of the component. Usually, there is a plus sign on top of the buzzer that shows which pin is the positive one.\n\n\n### Transistor\nA transistor is a device that regulates current or voltage flow and acts as a switch or gate for electronic signals. Transistors are composed of semiconductor material, with three layers. The transistor's three-layer structure contains an N-type\nsemiconductor layer sandwiched between P-type layers (a PNP configuration) or a P-type layer between N-type layers (an NPN configuration).\n\n(photo)\n\n\n### Diode\nA diode is an electrical device allowing current to move in one direction. The most common kind of diode in modern circuit design is the semiconductor diode. \nDiodes can be used as rectifiers, signal limiters, voltage regulators, switches, signal modulators, oscillators etc. Below, you can find the schematic symbol and the real\ncomponent appearance.\n\n(photo)\n\n## Connections\n  Below you can find the schematic:\n  \n  ``` photo ```(photo)\n\nThis scheme looks a little complicated, so let's simplify it by using some new electrical symbols. Sometimes, on really busy schematics, you can assign special symbols to node voltages. You can connect devices to these one-terminal symbols,\nand it'll be tied directly to 5V, 3.3V, VCC, or GND (ground).\n\nFor GND (ground) we will use the next symbol:\n\n(photo)\n\nFor +3.3V we will use:\n\n(photo)\n\nUsing the above defined symbols, our scheme is equivalent with:\n\n(photo)\n\n  \nWe will be using these symbols when our schemes will be too complicated to follow, so keep them in mind. Also, below is a visual representation of the project, check it too for a better understanding.\n\nIn the next diagram we have as main elements the button, the transistor and the buzzer.\n\nTo connect the button we will make the connection of the pins on the diagonal to avoid the short circuit. \n\nThe transistor will have the collector pin connected to ground, the base pin connected by a resistor to one of the pins on the board and the emitting pin will be connected to our buzzer by a diode to avoid polarity reversal. \n\nThe other pin of the buzzer is connected to the voltage.\n\n  ``` photo ``` (photo)\n    \n## Code","code":"","error":"","result":""},{"id":"5700e498-daa6-48ce-b4f4-e5f0c4673a3f","type":"markdown","editable":false,"data":"### Import libraries\nFirst, we import libraries to later use the functions and variables predefined in them.","code":"","error":"","result":""},{"id":"7a3eb17f-94eb-4ac3-a453-50631f8bbecb","type":"python","editable":false,"data":"#use these libraries to declare used pins and PWM\nfrom machine import Pin, PWM\n#for delay\nfrom time import sleep","code":"","error":"","result":""},{"id":"bb866e6c-d9df-4072-92a3-e630aaf96442","type":"markdown","editable":false,"data":"### Declaration variables\nThe code starts with the declaration of the pins used by the button and the buzzer. \n\nWe fisrt declare as an input pin ('Pin.IN') and pull up pin ('Pin.PULL_UP') the button and as output pin ('Pin.OUT') the buzzer.\nWith the initiation of the pin used by the buzzer, we declare it as PWM.\n\nThe button is connected to D1 (GPIO**5**) and the buzzer is connected to D6 (GPIO**12**). ","code":"","error":"","result":""},{"id":"6297d8be-b1cf-4ba0-92a2-eeda87136244","type":"python","editable":false,"data":"#define the pine used by the button\n#also initialise the button as INPUT, PULL_UP \nbutton = Pin(5, Pin.IN, Pin.PULL_UP) #D1\n#define the pin as OUTPUT and the PWM of the buzzer \nbuzzer = PWM(Pin(12, Pin.OUT) , freq = 500)","code":"","error":"","result":""},{"id":"b0d28256-0342-474e-9a52-e7d9f1697022","type":"markdown","editable":false,"data":"### Infinite loop\n\nWe will create an infinite loop ('while True') for the board to execute the instructions continuously.\n\nIn the this while loop we have to read the state of the button using button.value(), and if the button is pressed (button.value() == 0), the buzzer will turn on at a frequency of 1000 Hz (you can modify this frequency). \n\nAfter the if statement we need to put an elif to stop the buzzer, if the button is pushed down, we need something to keep the infinite loop in running.\n\nIf we leave the while with no instructions to do, the board will crash, because it will stay too long in a while loop and other processes will not be able to run.","code":"","error":"","result":""},{"id":"a5e95db1-6f3d-4348-8fdb-82404dd50099","type":"python","editable":false,"data":"#for board execute the instructions continuously we make an infinite loop\nwhile True:\n    # read the current state of the button\n    #if the button is pressed, turn on the buzzer\n    if button.value() == 0:\n        #we use a frequency of 1kHz(1000Hz)\n        #you can change this frequency so the sound can be\n        #more pleasant\n        buzzer.duty(1000)\n    #if the button is pushed down, we need something\n    #to keep the infinite loop function from running\n    elif button.value():\n        #if we leave the while with no instructions to do\n        #the board will crash, because it will stay too long\n        #in a while loop and other processes will not be able to run\n        buzzer.deinit()","code":"","error":"","result":""}]