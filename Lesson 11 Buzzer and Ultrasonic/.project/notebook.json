[{"id":"87236d3c-e5b4-425d-8eb2-ed11e49e3b78","type":"markdown","editable":false,"data":"# Lesson 11: Buzzer and Ultrasonic\n## 11.1 Overview\nThis lesson combines two lessons, lesson 9, Buzzer, and lesson 5, Ultrasonic\nHC-SR04+, and you will learn how to trigger a buzzer depending on distance.\n\n## 11.2 Components required\n* Development board;\n* Breadboard 830p;\n* Ultrasonic module HC-SR04+;\n* 1 x passive buzzer;\n* Diode;\n* Transistor;\n* 1 x 1000 Ω resistor ;\n* 11 x male-to-male jumper wires;\n* Micro USB – Type A USB cable;\n\n\n## 11.3 Connections\nBelow, you can find the schematic:\n#TODO img pb 81\n\nIn the scheme above we used two symbols defined in the previous lesson. If\nyou do not understand how to do all the connections, please check the previous\nlesson, the visual representation below and, also, you can see the scheme without\nusing the symbols for +3.3V and GND:\n\n#TODO img folder Lesson 11\n\nNext, you can find a visual representation of the project:\n\n#TODO img 81\n","code":"","error":"","result":""},{"id":"f7d8feee-ff11-4c5a-a59c-e8a6e15c0f94","type":"markdown","editable":false,"data":"# 11.4 Code\n\nThis lesson has a similar principle with the lesson RGB LED and\nUltrasonic. In that lesson, when the distance was lower than 25 cm, the red LED\nstarted to flash. This time, when the distance is lower than 25 cm, the buzzer will start\nto beep at an interval of 50 ms. When distance is higher than 25 cm, the buzzer will\nbe turned off.\n\nLike in the lesson RGB LED and Ultrasonic, we have to declare the pins\nused by the ultrasonic module, trigger and echo, the pin used by the buzzer and two\nvariables used later for calculating the distance.\n\nFirst step is to set the pin used by the\nbuzzer as OUTPUT, the trigger as OUTPUT and the echo as INPUT.","code":"","error":"","result":""},{"id":"000ed3db-1580-47b5-85f7-364e00d7a38d","type":"python","editable":false,"data":"# Buzzer and Ultrasonic\r\n\r\nimport time\r\nimport machine\r\nimport utime","code":"","error":"","result":""},{"id":"6208301d-8331-48d8-89d2-6391635497b7","type":"python","editable":false,"data":"#set the mode of the pin used by the buzzer as OUTPUT in PWM structure\r\nbuzzer = machine.PWM(machine.Pin(12, machine.Pin.OUT))","code":"","error":"","result":""},{"id":"1ac07906-e1cf-4cf4-8d01-69e9a1e613e0","type":"python","editable":false,"data":"# the trigger pin (transmitter) must be set as OUTPUT \r\ntrigg_pin = machine.Pin(0, machine.Pin.OUT)#D3\r\n\r\n#the echo pin (receiver) must be set as INPUT\r\necho_pin = machine.Pin(14, machine.Pin.IN)#D5","code":"","error":"","result":""},{"id":"11d34fe9-890d-4bbf-bd11-f238a3a8d2c8","type":"markdown","editable":false,"data":"In loop we will first calculate the distance. To calculate the\r\ndistance we need the travel time of the sound wave generated by turning the\r\ntransmitter ON for 10 microseconds. After finding the travel time (duration in our\r\ncode), the distance can be calculated with the following formula:\r\n\r\ndistance = duration*0.034/2;\r\n\r\nNext, we will use an if statement to decide if the distance is lower than 25\r\ncm, then we will turn On and Off the buzzer at a frequency of 1000 Hz with a 50 ms\r\ninterval. If the distance is higher than 25 cm, the buzzer is turned Off.","code":"","error":"","result":""},{"id":"ba4e3b51-aaf8-45c9-9023-1583e325c460","type":"python","editable":false,"data":"while True:\r\n    #set the trigPin to LOW (0) in order to prepare for the next reading\r\n    trigg_pin.value(0)\r\n    utime.sleep_us(2)\r\n\r\n    #generate an ultrasound for 10 microseconds then turn off the transmitter\r\n    trigg_pin.value(1)\r\n    utime.sleep_us(10)\r\n    trigg_pin.value(0)\r\n\r\n    #the formula for distance d = t*v/2\r\n    #v represents the speed of sound in air (about 0.034 cm/μs)\r\n    #t is the time, the duration of the pulse\r\n    time = machine.time_pulse_us(echo_pin, 1, 29000)\r\n    distance=(time*0.034)/2\r\n    \r\n    print(\"The distance is {} cm\".format(distance))\r\n    if distance < 25.0:\r\n        #creating the beeping effect\r\n        #turn on the buzzer using duty() and wait 50 ms\r\n        buzzer.duty(500)\r\n        utime.sleep(0.05)\r\n        \r\n        #turn off the buzzer and wait 50 m\r\n        buzzer.deinit()\r\n        utime.sleep(0.5)\r\n        \r\n    else:\r\n        #turn off the buzzer\r\n        buzzer.deinit()\r\n    \r\n    #wait for 0.1s\r\n    utime.sleep_us(1)","code":"","error":"","result":""}]