[{"id":"f54d3ea6-7859-4cff-9fcc-b961e33dbf77","type":"markdown","editable":false,"data":"# Lesson 12: Play songs with a buzzer\n\n## Overview\n\nIn this lesson you will learn how to play songs using the buzzer. We have\ncreated two songs that you can play with the buzzer. If you are more talented, you\ncan write more complicated songs.\n\n## Components required\n\n* Development board;\n* Breadboard 830p;\n* 1 x passive buzzer;\n* Diode;\n* Transistor;\n* 2 x push button;\n* 1 x 1000 Ω resistor ;\n* 12 x male-to-male jumper wires;\n* Micro USB – Type A USB cable;\n\n## Connections\n  Below you can find the schematic:\n  \n  ``` photo ```(photo)\n\nIn the next diagram we have as main elements the buttons, the transistor and the buzzer.\n\nTo connect the buttons we will make the connection of the pins on the diagonal to avoid the short circuit. \n\nThe transistor will have the collector pin connected to ground, the base pin connected by a resistor to one of the pins on the board and the emitting pin will be connected to our buzzer by a diode to avoid polarity reversal. \n\nThe other pin of the buzzer is connected to the voltage.\n  \n  Below, you can find a visual representation of the project:\n  \n  ``` photo ```(photo)\n  \n## Code\n","code":"","error":"","result":""},{"id":"99501cc5-1dea-4a77-afa9-bfbaf2aa573c","type":"markdown","editable":false,"data":"### Import libraries\nFirst, we import libraries to later use the functions and variables predefined in them.","code":"","error":"","result":""},{"id":"c82f6139-ee51-480a-bcae-2fac7aa0185c","type":"python","editable":false,"data":"#use these libraries to declare used pins and PWM\nfrom machine import Pin, PWM\n#for delay\nfrom time import sleep","code":"","error":"","result":""},{"id":"ed31a40a-6019-4161-823e-b55a3225e0be","type":"markdown","editable":false,"data":"### Declaration variables\nThe code starts with the declaration of the pins used by the buttons and the buzzer. \n\nWe first declare as an input pins ('Pin.IN') and pull up pins ('Pin.PULL_UP') the buttons and as output pin ('Pin.OUT') the buzzer.\nWith the initiation of the pin used by the buzzer, we declare it as PWM.\n\nThe first button is connected to D1 (GPIO**5**) , the second button is connected to D2 (GPIO**5**) and the buzzer is connected to D6 (GPIO**12**).","code":"","error":"","result":""},{"id":"c46e7270-af9e-4f72-92a7-a747b8259a9d","type":"python","editable":false,"data":"#define the pins used by the buttons\n#also initialise the buttons as INPUT, PULL_UP \nbutton1 = Pin(5, Pin.IN, Pin.PULL_UP) #D1\nbutton2 = Pin(4, Pin.IN, Pin.PULL_UP) #D2\n#define the pin as OUTPUT and the PWM of the buzzer \nbuzzer = PWM(Pin(12, Pin.OUT) , freq = 500)","code":"","error":"","result":""},{"id":"8c66639a-0491-48a2-8233-70e9823d4bcd","type":"markdown","editable":false,"data":"","code":"","error":"","result":""},{"id":"0807f379-1b47-42ec-9614-b76a46e9acfe","type":"markdown","editable":false,"data":"Define the frequencies of the notes for all the 7 octaves these notes have an error because we declared them as integers and not floats.","code":"","error":"","result":""},{"id":"602a975d-7d96-4e40-a31d-216a39273e19","type":"python","editable":false,"data":"#define the frequencies of the notes\n#for all the 7 octaves\n#these notes have an error because we \n#declared them as integers and not floats\nc8 = 4187\nb7 = 3951\na7 = 3520\ng7 = 3136\nf7 = 2794\ne7 = 2637\nd7 = 2349\nc7 = 2093\nb6 = 1975\na6 = 1760\ng6 = 1568\nf6 = 1397\ne6 = 1318\nd6 = 1174\nc6 = 1046\nb5 = 988\na5 = 880\ng5 = 784\nf5 = 698\ne5 = 659\nd5 = 587\nc5 = 523\nb4 = 494\na4 = 440\ng4 = 392\nf4 = 349\ne4 = 330\nd4 = 293\nc4 = 261\nb3 = 247\na3 = 220\ng3 = 196\nf3 = 174\ne3 = 165\nd3 = 146\nc3 = 130\nb2 = 123\na2 = 110\ng2 = 97\nf2 = 87\ne2 = 82\nd2 = 73\nc2 = 65\nb1 = 61\na1 = 55\ng1 = 49\nf1 = 43\ne1 = 41\nd1 = 37\nc1 = 33","code":"","error":"","result":""},{"id":"071e666b-0480-4bdd-8871-943a60c702c4","type":"markdown","editable":false,"data":"\n## ","code":"","error":"","result":""},{"id":"d6e091a2-63b7-40b2-a6ac-51ed177ce1b5","type":"markdown","editable":false,"data":"\n### First song - Function\n\nWhen calling this function, the buzzer will play fisrt song.\nIn this function, fisrt, we will define the waiting times and after create the first sequence rendering each indicated note for delay1 (or delay2, or delay3) milliseconds, then turn off the buzzer for delay4 milliseconds then play the next sequence.","code":"","error":"","result":""},{"id":"c62e96a7-13c2-4d21-85bb-43a2cf4678a8","type":"python","editable":false,"data":"#when calling this function, the buzzer will\n#play the ABC Alphabet song\ndef abc_song():\n    #define the waiting times\n    sleep1 = 0.7\n    sleep2 = 0.01\n    sleep3 = 0.3\n    sleep4 = 0.1\n    \n    #play every note indicated for delay1 (or delay2, or delay3)\n    #milliseconds, then turn off the buzzer for delay4 milliseconds\n    #then play the next note\n    \n    #first sequence\n    #play: C C G G A A G\n    buzzer.freq(c7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.freq(c7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.duty(g7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.duty(g7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.duty(a7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.duty(a7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)\n    \n    buzzer.duty(g7)\n    sleep(sleep1)\n    buzzer.deinit()\n    sleep(sleep4)","code":"","error":"","result":""},{"id":"c7d63ee6-274c-4c3a-a632-79a39903d6f0","type":"markdown","editable":false,"data":"\n### Second song - Function\nWhen calling this function, the buzzer will play the Old Mcdonald had a farm song.\n\nThe code is the same as for the first song, the difference being the musical notes.","code":"","error":"","result":""},{"id":"f5d105f9-968b-451d-8332-1257a8fca570","type":"python","editable":false,"data":"#when calling this function, the buzzer will\n#play the Old Mcdonald had a farm song\ndef old_mcdonald():\n    #play every note indicated for time1 (or time2, \n    #or time3, or time4, or time5) milliseconds, \n    #then turn off the buzzer for time0 milliseconds\n    #then play the next note\n    time0 = 0.1\n    time1 = 0.3\n    time2 = 0.6\n    time3 = 0.9\n    time4 = 0.55\n    time5 = 0.2\n\n    #first part\n    #play: C C C G A A G\n    buzzer.freq(c4)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.freq(c4)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.duty(c4)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.duty(g3)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.duty(a4)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.duty(a4)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)\n    \n    buzzer.duty(g3)\n    sleep(time1)\n    buzzer.deinit()\n    sleep(time0)","code":"","error":"","result":""},{"id":"f3c3bb60-0ce0-4533-aa70-708647ff7717","type":"markdown","editable":false,"data":"### Infinite loop\n\nWe will create an infinite loop ('while True') for the board to execute the instructions continuously.\n\nIn the this while loop we have to read the state of the button using button.value(), and if the first button is pressed (button.value() == 0), the buzzer will turn on first song, same for the second song.","code":"","error":"","result":""},{"id":"d50989ea-65eb-498e-8325-3e0bc35f3371","type":"python","editable":false,"data":"#for board execute the instructions continuously we make an infinite loop\nwhile True:\n    # read the current state of the button\n    #if the first button is pressed, turn on first song\n    if button1.value() == 0:\n        #play ABC Alphabet song\n        abc_song()\n    #if the second button was pressed, play the second song\n    elif button2.value() == 0:\n        #play the second song\n        old_mcdonald()","code":"","error":"","result":""}]