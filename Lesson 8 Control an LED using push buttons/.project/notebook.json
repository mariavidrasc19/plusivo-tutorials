[{"id":"129e9e44-12eb-45af-abf1-92eef5d807fa","type":"markdown","editable":true,"data":"# Lesson 8: Control an LED using push buttons\n\n\n## Overview\n\nIn this lesson, you are going to learn how to use two push buttons to control\nthe brightness of an LED.\n\n## Components required\n\n* Development board;\n* Breadboard 830p;\n* 2 x push buttons;\n* 1 x LED;\n* 1 x 150 Ω resistor;\n* 7 x male-to-male jumper wires;\n* Micro USB – Type A USB cable;\n\n## Components introduction\n\n\n### Momentary push button switch\n\n  ``` photo ```(photo)\n\nThis type of button is very common in prototyping as it is breadboard friendly, cheap and reliable. The way it works is pretty basic: there are 2 lines: A-C\nand B-D, which are always connected. When the button is pressed, these two lines A-C and B-D, are connected together, which means that the current will flow from A to D and from B to C.\n\n## Connections\n\n  Below you can find the schematic:\n\n  ``` photo ```(photo)\n  \n  In the next diagram we have as main elements the button and the led. \n  \n  The buttons will have 2 connections, one with the ground and one like a pin on the board. \n  The connected pins must be diagonal to avoid a short circuit. \n  \n  The LED needs to attach a resistor to the cathode to avoid damage.\n  \n  Next, you can find a visual representation of the project:\n  \n  ``` photo ```(photo)\n  \n## Code\n    ","code":"","error":"","result":""},{"id":"7ec3c971-9811-4516-a937-a4f651c91062","type":"markdown","editable":false,"data":"### Import libraries\nFirst, we import libraries to later use the functions and variables predefined in them.","code":"","error":"","result":""},{"id":"35f8b8e0-4106-4dc8-afc6-1b3fa3068070","type":"python","editable":false,"data":"#use these libraries to declare used pins and PWM\nfrom machine import Pin, PWM\n#for delay\nfrom time import sleep","code":"","error":"","result":""},{"id":"321c8545-b9e2-4ada-a787-5f69bde73178","type":"markdown","editable":false,"data":"### Declaration variables\nThe code starts with the declaration of the pins used by the buttons and the LED. \n\nWe fisrt declare as an input pins ('Pin.IN') and also as an pull up pins ('Pin.PULL_UP') the two buttons and as output pin ('Pin.OUT') the led.\n\nLed is connected to D7 (GPIO**13**), the button that will reduce the brightness is connected to D1 (GPIO**5**) and the button for increasing the brightness is connected to D2 (GPIO**4**). ","code":"","error":"","result":""},{"id":"96cd22a2-68e3-42fb-96f5-41d7ef0ee0fa","type":"python","editable":false,"data":"#define the pins used by the buttons and led\n#also initialise it as INPUT, PULL_UP and led as OUTPUT\nbutton_down = Pin(5, Pin.IN, Pin.PULL_UP)\nbutton_up = Pin(4,  Pin.IN, Pin.PULL_UP)\nled = Pin(13, Pin.OUT)\n","code":"","error":"","result":""},{"id":"9771ce57-f51e-4c84-8910-522fca7a8da6","type":"markdown","editable":false,"data":"We declare the pwm for led to create fluctuating energy.\n\nAlso, we need an integer variable that will store a value from 0 (0%\nduty cycle) to 1023 (100% duty cycle).","code":"","error":"","result":""},{"id":"58cd3524-d402-4642-82bb-8a21f53d57c1","type":"python","editable":false,"data":"#declare the pwm for led \npwm = PWM(led)\n\n#the integer variable that is initially null\ncontainer = 0","code":"","error":"","result":""},{"id":"283a1d0d-2108-4d4e-aacf-650a78961c85","type":"markdown","editable":false,"data":"### Infinite loop\n\nWe will create an infinite loop ('while True') for the board to execute the instructions continuously.\n\nIn the this while loop we have also two while loops, one for each button. \n\nWhen the down button is pressed, an if statement will change the value of container, and turn on the LED at the new value. Also, we will need a delay, in this case we have chosen 10 ms, between runs.","code":"","error":"","result":""},{"id":"5daa054c-1d45-4545-9d79-799f3f8fd323","type":"python","editable":false,"data":"#for board execute the instructions continuously we make an infinite loop\nwhile True:\n    #while the down button is pressed\n    while button_down.value() == 0:\n        #the minimum value for container is 0, so if the\n        #value is greater than 50, we can substract 50\n        #else, the value will be set to 0\n        print('Button down pressed')\n        if container > 50:\n            #change the value\n            container = container - 50\n        else:\n            #set the value to 0\n            container = 0;\n        \n        #turn on the LED\n        pwm.duty(container)\n        #wait 10 ms before the next run\n        sleep(0.1)\n        \n    #while the up button is pressed\n    while button_up.value() == 0: \n        #the maximum value for container is 1023\n        #if the value is less than 972, we can add 50\n        #otherwise, the container will be set to 1023\n        print('Button up pressed')\n        if container < 972:\n            container = container + 50\n        else:\n            container = 1023\n        \n        #turn on the LED\n        pwm.duty(container)  # =analogWrite (din arduino)\n        #wait 10 ms before the next run\n        sleep(0.1)\n","code":"","error":"","result":""}]